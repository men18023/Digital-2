

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Sun Aug 01 11:39:08 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	clrtext,global,class=CODE,delta=2
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,merge=1,delta=2
    15                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    16                           	dabs	1,0x7E,2
    17  0000                     
    18                           ; Version 2.20
    19                           ; Generated 12/02/2020 GMT
    20                           ; 
    21                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    22                           ; All rights reserved.
    23                           ; 
    24                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    25                           ; 
    26                           ; Redistribution and use in source and binary forms, with or without modification, are
    27                           ; permitted provided that the following conditions are met:
    28                           ; 
    29                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    30                           ;        conditions and the following disclaimer.
    31                           ; 
    32                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    33                           ;        of conditions and the following disclaimer in the documentation and/or other
    34                           ;        materials provided with the distribution.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC16F887 Definitions
    50                           ; 
    51                           ; SFR Addresses
    52  0000                     	;# 
    53  0001                     	;# 
    54  0002                     	;# 
    55  0003                     	;# 
    56  0004                     	;# 
    57  0005                     	;# 
    58  0006                     	;# 
    59  0007                     	;# 
    60  0008                     	;# 
    61  0009                     	;# 
    62  000A                     	;# 
    63  000B                     	;# 
    64  000C                     	;# 
    65  000D                     	;# 
    66  000E                     	;# 
    67  000E                     	;# 
    68  000F                     	;# 
    69  0010                     	;# 
    70  0011                     	;# 
    71  0012                     	;# 
    72  0013                     	;# 
    73  0014                     	;# 
    74  0015                     	;# 
    75  0015                     	;# 
    76  0016                     	;# 
    77  0017                     	;# 
    78  0018                     	;# 
    79  0019                     	;# 
    80  001A                     	;# 
    81  001B                     	;# 
    82  001B                     	;# 
    83  001C                     	;# 
    84  001D                     	;# 
    85  001E                     	;# 
    86  001F                     	;# 
    87  0081                     	;# 
    88  0085                     	;# 
    89  0086                     	;# 
    90  0087                     	;# 
    91  0088                     	;# 
    92  0089                     	;# 
    93  008C                     	;# 
    94  008D                     	;# 
    95  008E                     	;# 
    96  008F                     	;# 
    97  0090                     	;# 
    98  0091                     	;# 
    99  0092                     	;# 
   100  0093                     	;# 
   101  0093                     	;# 
   102  0093                     	;# 
   103  0094                     	;# 
   104  0095                     	;# 
   105  0096                     	;# 
   106  0097                     	;# 
   107  0098                     	;# 
   108  0099                     	;# 
   109  009A                     	;# 
   110  009B                     	;# 
   111  009C                     	;# 
   112  009D                     	;# 
   113  009E                     	;# 
   114  009F                     	;# 
   115  0105                     	;# 
   116  0107                     	;# 
   117  0108                     	;# 
   118  0109                     	;# 
   119  010C                     	;# 
   120  010C                     	;# 
   121  010D                     	;# 
   122  010E                     	;# 
   123  010F                     	;# 
   124  0185                     	;# 
   125  0187                     	;# 
   126  0188                     	;# 
   127  0189                     	;# 
   128  018C                     	;# 
   129  018D                     	;# 
   130  0000                     	;# 
   131  0001                     	;# 
   132  0002                     	;# 
   133  0003                     	;# 
   134  0004                     	;# 
   135  0005                     	;# 
   136  0006                     	;# 
   137  0007                     	;# 
   138  0008                     	;# 
   139  0009                     	;# 
   140  000A                     	;# 
   141  000B                     	;# 
   142  000C                     	;# 
   143  000D                     	;# 
   144  000E                     	;# 
   145  000E                     	;# 
   146  000F                     	;# 
   147  0010                     	;# 
   148  0011                     	;# 
   149  0012                     	;# 
   150  0013                     	;# 
   151  0014                     	;# 
   152  0015                     	;# 
   153  0015                     	;# 
   154  0016                     	;# 
   155  0017                     	;# 
   156  0018                     	;# 
   157  0019                     	;# 
   158  001A                     	;# 
   159  001B                     	;# 
   160  001B                     	;# 
   161  001C                     	;# 
   162  001D                     	;# 
   163  001E                     	;# 
   164  001F                     	;# 
   165  0081                     	;# 
   166  0085                     	;# 
   167  0086                     	;# 
   168  0087                     	;# 
   169  0088                     	;# 
   170  0089                     	;# 
   171  008C                     	;# 
   172  008D                     	;# 
   173  008E                     	;# 
   174  008F                     	;# 
   175  0090                     	;# 
   176  0091                     	;# 
   177  0092                     	;# 
   178  0093                     	;# 
   179  0093                     	;# 
   180  0093                     	;# 
   181  0094                     	;# 
   182  0095                     	;# 
   183  0096                     	;# 
   184  0097                     	;# 
   185  0098                     	;# 
   186  0099                     	;# 
   187  009A                     	;# 
   188  009B                     	;# 
   189  009C                     	;# 
   190  009D                     	;# 
   191  009E                     	;# 
   192  009F                     	;# 
   193  0105                     	;# 
   194  0107                     	;# 
   195  0108                     	;# 
   196  0109                     	;# 
   197  010C                     	;# 
   198  010C                     	;# 
   199  010D                     	;# 
   200  010E                     	;# 
   201  010F                     	;# 
   202  0185                     	;# 
   203  0187                     	;# 
   204  0188                     	;# 
   205  0189                     	;# 
   206  018C                     	;# 
   207  018D                     	;# 
   208  0000                     	;# 
   209  0001                     	;# 
   210  0002                     	;# 
   211  0003                     	;# 
   212  0004                     	;# 
   213  0005                     	;# 
   214  0006                     	;# 
   215  0007                     	;# 
   216  0008                     	;# 
   217  0009                     	;# 
   218  000A                     	;# 
   219  000B                     	;# 
   220  000C                     	;# 
   221  000D                     	;# 
   222  000E                     	;# 
   223  000E                     	;# 
   224  000F                     	;# 
   225  0010                     	;# 
   226  0011                     	;# 
   227  0012                     	;# 
   228  0013                     	;# 
   229  0014                     	;# 
   230  0015                     	;# 
   231  0015                     	;# 
   232  0016                     	;# 
   233  0017                     	;# 
   234  0018                     	;# 
   235  0019                     	;# 
   236  001A                     	;# 
   237  001B                     	;# 
   238  001B                     	;# 
   239  001C                     	;# 
   240  001D                     	;# 
   241  001E                     	;# 
   242  001F                     	;# 
   243  0081                     	;# 
   244  0085                     	;# 
   245  0086                     	;# 
   246  0087                     	;# 
   247  0088                     	;# 
   248  0089                     	;# 
   249  008C                     	;# 
   250  008D                     	;# 
   251  008E                     	;# 
   252  008F                     	;# 
   253  0090                     	;# 
   254  0091                     	;# 
   255  0092                     	;# 
   256  0093                     	;# 
   257  0093                     	;# 
   258  0093                     	;# 
   259  0094                     	;# 
   260  0095                     	;# 
   261  0096                     	;# 
   262  0097                     	;# 
   263  0098                     	;# 
   264  0099                     	;# 
   265  009A                     	;# 
   266  009B                     	;# 
   267  009C                     	;# 
   268  009D                     	;# 
   269  009E                     	;# 
   270  009F                     	;# 
   271  0105                     	;# 
   272  0107                     	;# 
   273  0108                     	;# 
   274  0109                     	;# 
   275  010C                     	;# 
   276  010C                     	;# 
   277  010D                     	;# 
   278  010E                     	;# 
   279  010F                     	;# 
   280  0185                     	;# 
   281  0187                     	;# 
   282  0188                     	;# 
   283  0189                     	;# 
   284  018C                     	;# 
   285  018D                     	;# 
   286  0013                     _SSPBUF	set	19
   287  0014                     _SSPCON	set	20
   288  0009                     _PORTE	set	9
   289  0008                     _PORTD	set	8
   290  0007                     _PORTC	set	7
   291  0006                     _PORTB	set	6
   292  0005                     _PORTA	set	5
   293  0007                     _PORTCbits	set	7
   294  0094                     _SSPSTATbits	set	148
   295  0094                     _SSPSTAT	set	148
   296  008F                     _OSCCONbits	set	143
   297  0088                     _TRISD	set	136
   298  0086                     _TRISB	set	134
   299  043B                     _TRISC3	set	1083
   300  043D                     _TRISC5	set	1085
   301  043A                     _TRISC2	set	1082
   302  0439                     _TRISC1	set	1081
   303  0189                     _ANSELH	set	393
   304  0188                     _ANSEL	set	392
   305                           
   306                           	psect	cinit
   307  07F1                     start_initialization:	
   308                           ; #config settings
   309                           
   310  07F1                     __initialization:
   311                           
   312                           ; Clear objects allocated to COMMON
   313  07F1  01F5               	clrf	__pbssCOMMON& (0+127)
   314  07F2  01F6               	clrf	(__pbssCOMMON+1)& (0+127)
   315                           
   316                           ; Clear objects allocated to BANK0
   317  07F3  1383               	bcf	3,7	;select IRP bank0
   318  07F4  3020               	movlw	low __pbssBANK0
   319  07F5  0084               	movwf	4
   320  07F6  303E               	movlw	low (__pbssBANK0+30)
   321  07F7  120A  118A  2767  120A  118A  	fcall	clear_ram0
   322  07FC                     end_of_initialization:	
   323                           ;End of C runtime variable initialization code
   324                           
   325  07FC                     __end_of__initialization:
   326  07FC  0183               	clrf	3
   327  07FD  120A  118A  2FB1   	ljmp	_main	;jump to C main() function
   328                           
   329                           	psect	bssCOMMON
   330  0075                     __pbssCOMMON:
   331  0075                     _V2:
   332  0075                     	ds	1
   333  0076                     _V1:
   334  0076                     	ds	1
   335                           
   336                           	psect	bssBANK0
   337  0020                     __pbssBANK0:
   338  0020                     _BUFFER:
   339  0020                     	ds	30
   340                           
   341                           	psect	clrtext
   342  0767                     clear_ram0:	
   343                           ;	Called with FSR containing the base address, and
   344                           ;	W with the last address+1
   345                           
   346  0767  0064               	clrwdt	;clear the watchdog before getting into this loop
   347  0768                     clrloop0:
   348  0768  0180               	clrf	0	;clear RAM location pointed to by FSR
   349  0769  0A84               	incf	4,f	;increment pointer
   350  076A  0604               	xorwf	4,w	;XOR with final address
   351  076B  1903               	btfsc	3,2	;have we reached the end yet?
   352  076C  3400               	retlw	0	;all done for this memory range, return
   353  076D  0604               	xorwf	4,w	;XOR again to restore value
   354  076E  2F68               	goto	clrloop0	;do the next byte
   355                           
   356                           	psect	cstackCOMMON
   357  0070                     __pcstackCOMMON:
   358  0070                     ?_setup:
   359  0070                     ?_spiWrite:	
   360                           ; 1 bytes @ 0x0
   361                           
   362  0070                     ??_spiWrite:	
   363                           ; 1 bytes @ 0x0
   364                           
   365  0070                     ?_spiRead:	
   366                           ; 1 bytes @ 0x0
   367                           
   368  0070                     ??_spiRead:	
   369                           ; 1 bytes @ 0x0
   370                           
   371  0070                     ?_spiInit:	
   372                           ; 1 bytes @ 0x0
   373                           
   374  0070                     ?_main:	
   375                           ; 1 bytes @ 0x0
   376                           
   377  0070                     ?_spiReceiveWait:	
   378                           ; 1 bytes @ 0x0
   379                           
   380  0070                     ??_spiReceiveWait:	
   381                           ; 1 bytes @ 0x0
   382                           
   383  0070                     spiInit@sDataSample:	
   384                           ; 1 bytes @ 0x0
   385                           
   386  0070                     spiWrite@dat:	
   387                           ; 1 bytes @ 0x0
   388                           
   389                           
   390                           ; 1 bytes @ 0x0
   391  0070                     	ds	1
   392  0071                     spiInit@sClockIdle:
   393                           
   394                           ; 1 bytes @ 0x1
   395  0071                     	ds	1
   396  0072                     spiInit@sTransmitEdge:
   397                           
   398                           ; 1 bytes @ 0x2
   399  0072                     	ds	1
   400  0073                     ??_spiInit:
   401  0073                     spiInit@sType:	
   402                           ; 1 bytes @ 0x3
   403                           
   404                           
   405                           ; 1 bytes @ 0x3
   406  0073                     	ds	1
   407  0074                     ??_setup:
   408  0074                     ??_main:	
   409                           ; 1 bytes @ 0x4
   410                           
   411                           
   412                           ; 1 bytes @ 0x4
   413  0074                     	ds	1
   414                           
   415                           	psect	maintext
   416  07B1                     __pmaintext:	
   417 ;;
   418 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   419 ;;
   420 ;; *************** function _main *****************
   421 ;; Defined at:
   422 ;;		line 53 in file "mainM.c"
   423 ;; Parameters:    Size  Location     Type
   424 ;;		None
   425 ;; Auto vars:     Size  Location     Type
   426 ;;		None
   427 ;; Return value:  Size  Location     Type
   428 ;;                  1    wreg      void 
   429 ;; Registers used:
   430 ;;		wreg, status,2, status,0, pclath, cstack
   431 ;; Tracked objects:
   432 ;;		On entry : B00/0
   433 ;;		On exit  : 0/0
   434 ;;		Unchanged: 0/0
   435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   436 ;;      Params:         0       0       0       0       0
   437 ;;      Locals:         0       0       0       0       0
   438 ;;      Temps:          1       0       0       0       0
   439 ;;      Totals:         1       0       0       0       0
   440 ;;Total ram usage:        1 bytes
   441 ;; Hardware stack levels required when called:    2
   442 ;; This function calls:
   443 ;;		_setup
   444 ;;		_spiRead
   445 ;;		_spiWrite
   446 ;; This function is called by:
   447 ;;		Startup code after reset
   448 ;; This function uses a non-reentrant model
   449 ;;
   450                           
   451                           
   452                           ;psect for function _main
   453  07B1                     _main:
   454  07B1                     l775:	
   455                           ;incstack = 0
   456                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   457                           
   458                           
   459                           ;mainM.c: 55:     setup();
   460  07B1  120A  118A  278E  120A  118A  	fcall	_setup
   461  07B6                     l777:
   462                           
   463                           ;mainM.c: 57:     {;mainM.c: 58:         PORTCbits.RC2 = 0;
   464  07B6  1283               	bcf	3,5	;RP0=0, select bank0
   465  07B7  1303               	bcf	3,6	;RP1=0, select bank0
   466  07B8  1107               	bcf	7,2	;volatile
   467  07B9                     l779:
   468                           
   469                           ;mainM.c: 59:         _delay((unsigned long)((1)*(4000000/4000.0)));
   470  07B9  30C7               	movlw	199
   471  07BA  00F4               	movwf	??_main
   472  07BB                     u47:
   473  07BB  2FBC               	nop2
   474  07BC  0BF4               	decfsz	??_main,f
   475  07BD  2FBB               	goto	u47
   476  07BE  2FBF               	nop2
   477  07BF  2FC0               	nop2
   478  07C0                     l781:
   479                           
   480                           ;mainM.c: 61:         spiWrite(0x0A);
   481  07C0  300A               	movlw	10
   482  07C1  120A  118A  275A  120A  118A  	fcall	_spiWrite
   483  07C6                     l783:
   484                           
   485                           ;mainM.c: 62:         V1 = spiRead();
   486  07C6  120A  118A  276F  120A  118A  	fcall	_spiRead
   487  07CB  00F4               	movwf	??_main
   488  07CC  0874               	movf	??_main,w
   489  07CD  00F6               	movwf	_V1
   490  07CE                     l785:
   491                           
   492                           ;mainM.c: 63:         _delay((unsigned long)((1)*(4000000/4000.0)));
   493  07CE  30C7               	movlw	199
   494  07CF  00F4               	movwf	??_main
   495  07D0                     u57:
   496  07D0  2FD1               	nop2
   497  07D1  0BF4               	decfsz	??_main,f
   498  07D2  2FD0               	goto	u57
   499  07D3  2FD4               	nop2
   500  07D4  2FD5               	nop2
   501                           
   502                           ;mainM.c: 65:         spiWrite(0x0A);
   503  07D5  300A               	movlw	10
   504  07D6  120A  118A  275A  120A  118A  	fcall	_spiWrite
   505                           
   506                           ;mainM.c: 66:         V2 = spiRead();
   507  07DB  120A  118A  276F  120A  118A  	fcall	_spiRead
   508  07E0  00F4               	movwf	??_main
   509  07E1  0874               	movf	??_main,w
   510  07E2  00F5               	movwf	_V2
   511  07E3                     l787:
   512                           
   513                           ;mainM.c: 67:         _delay((unsigned long)((1)*(4000000/4000.0)));
   514  07E3  30C7               	movlw	199
   515  07E4  00F4               	movwf	??_main
   516  07E5                     u67:
   517  07E5  2FE6               	nop2
   518  07E6  0BF4               	decfsz	??_main,f
   519  07E7  2FE5               	goto	u67
   520  07E8  2FE9               	nop2
   521  07E9  2FEA               	nop2
   522  07EA                     l789:
   523                           
   524                           ;mainM.c: 69:         PORTCbits.RC2 = 1;
   525  07EA  1283               	bcf	3,5	;RP0=0, select bank0
   526  07EB  1303               	bcf	3,6	;RP1=0, select bank0
   527  07EC  1507               	bsf	7,2	;volatile
   528  07ED  2FB6               	goto	l777
   529  07EE  120A  118A  2800   	ljmp	start
   530  07F1                     __end_of_main:
   531                           
   532                           	psect	text1
   533  075A                     __ptext1:	
   534 ;; *************** function _spiWrite *****************
   535 ;; Defined at:
   536 ;;		line 33 in file "SPI.c"
   537 ;; Parameters:    Size  Location     Type
   538 ;;  dat             1    wreg     unsigned char 
   539 ;; Auto vars:     Size  Location     Type
   540 ;;  dat             1    0[COMMON] unsigned char 
   541 ;; Return value:  Size  Location     Type
   542 ;;                  1    wreg      void 
   543 ;; Registers used:
   544 ;;		wreg
   545 ;; Tracked objects:
   546 ;;		On entry : 0/0
   547 ;;		On exit  : 0/0
   548 ;;		Unchanged: 0/0
   549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   550 ;;      Params:         0       0       0       0       0
   551 ;;      Locals:         1       0       0       0       0
   552 ;;      Temps:          0       0       0       0       0
   553 ;;      Totals:         1       0       0       0       0
   554 ;;Total ram usage:        1 bytes
   555 ;; Hardware stack levels used:    1
   556 ;; This function calls:
   557 ;;		Nothing
   558 ;; This function is called by:
   559 ;;		_main
   560 ;; This function uses a non-reentrant model
   561 ;;
   562                           
   563                           
   564                           ;psect for function _spiWrite
   565  075A                     _spiWrite:
   566                           
   567                           ;incstack = 0
   568                           ; Regs used in _spiWrite: [wreg]
   569                           ;spiWrite@dat stored from wreg
   570  075A  00F0               	movwf	spiWrite@dat
   571  075B                     l713:
   572                           
   573                           ;SPI.c: 33: void spiWrite(char dat);SPI.c: 34: {;SPI.c: 35:     SSPBUF = dat;
   574  075B  0870               	movf	spiWrite@dat,w
   575  075C  1283               	bcf	3,5	;RP0=0, select bank0
   576  075D  1303               	bcf	3,6	;RP1=0, select bank0
   577  075E  0093               	movwf	19	;volatile
   578  075F                     l79:
   579  075F  0008               	return
   580  0760                     __end_of_spiWrite:
   581                           
   582                           	psect	text2
   583  076F                     __ptext2:	
   584 ;; *************** function _spiRead *****************
   585 ;; Defined at:
   586 ;;		line 46 in file "SPI.c"
   587 ;; Parameters:    Size  Location     Type
   588 ;;		None
   589 ;; Auto vars:     Size  Location     Type
   590 ;;		None
   591 ;; Return value:  Size  Location     Type
   592 ;;                  1    wreg      unsigned char 
   593 ;; Registers used:
   594 ;;		wreg, status,2, status,0, pclath, cstack
   595 ;; Tracked objects:
   596 ;;		On entry : 0/0
   597 ;;		On exit  : 0/0
   598 ;;		Unchanged: 0/0
   599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   600 ;;      Params:         0       0       0       0       0
   601 ;;      Locals:         0       0       0       0       0
   602 ;;      Temps:          0       0       0       0       0
   603 ;;      Totals:         0       0       0       0       0
   604 ;;Total ram usage:        0 bytes
   605 ;; Hardware stack levels used:    1
   606 ;; Hardware stack levels required when called:    1
   607 ;; This function calls:
   608 ;;		_spiReceiveWait
   609 ;; This function is called by:
   610 ;;		_main
   611 ;; This function uses a non-reentrant model
   612 ;;
   613                           
   614                           
   615                           ;psect for function _spiRead
   616  076F                     _spiRead:
   617  076F                     l715:	
   618                           ;incstack = 0
   619                           ; Regs used in _spiRead: [wreg+status,2+status,0+pclath+cstack]
   620                           
   621                           
   622                           ;SPI.c: 48:     spiReceiveWait();
   623  076F  120A  118A  2760  120A  118A  	fcall	_spiReceiveWait
   624  0774                     l717:
   625                           
   626                           ;SPI.c: 49:     return(SSPBUF);
   627  0774  1283               	bcf	3,5	;RP0=0, select bank0
   628  0775  1303               	bcf	3,6	;RP1=0, select bank0
   629  0776  0813               	movf	19,w	;volatile
   630  0777                     l87:
   631  0777  0008               	return
   632  0778                     __end_of_spiRead:
   633                           
   634                           	psect	text3
   635  0760                     __ptext3:	
   636 ;; *************** function _spiReceiveWait *****************
   637 ;; Defined at:
   638 ;;		line 28 in file "SPI.c"
   639 ;; Parameters:    Size  Location     Type
   640 ;;		None
   641 ;; Auto vars:     Size  Location     Type
   642 ;;		None
   643 ;; Return value:  Size  Location     Type
   644 ;;                  1    wreg      void 
   645 ;; Registers used:
   646 ;;		None
   647 ;; Tracked objects:
   648 ;;		On entry : 0/0
   649 ;;		On exit  : 0/0
   650 ;;		Unchanged: 0/0
   651 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   652 ;;      Params:         0       0       0       0       0
   653 ;;      Locals:         0       0       0       0       0
   654 ;;      Temps:          0       0       0       0       0
   655 ;;      Totals:         0       0       0       0       0
   656 ;;Total ram usage:        0 bytes
   657 ;; Hardware stack levels used:    1
   658 ;; This function calls:
   659 ;;		Nothing
   660 ;; This function is called by:
   661 ;;		_spiRead
   662 ;; This function uses a non-reentrant model
   663 ;;
   664                           
   665                           
   666                           ;psect for function _spiReceiveWait
   667  0760                     _spiReceiveWait:
   668  0760                     l689:	
   669                           ;incstack = 0
   670                           ; Regs used in _spiReceiveWait: []
   671                           
   672  0760                     l73:	
   673                           ;SPI.c: 30:     while ( !SSPSTATbits.BF );
   674                           
   675  0760  1683               	bsf	3,5	;RP0=1, select bank1
   676  0761  1303               	bcf	3,6	;RP1=0, select bank1
   677  0762  1C14               	btfss	20,0	;volatile
   678  0763  2F65               	goto	u21
   679  0764  2F66               	goto	u20
   680  0765                     u21:
   681  0765  2F60               	goto	l73
   682  0766                     u20:
   683  0766                     l76:
   684  0766  0008               	return
   685  0767                     __end_of_spiReceiveWait:
   686                           
   687                           	psect	text4
   688  078E                     __ptext4:	
   689 ;; *************** function _setup *****************
   690 ;; Defined at:
   691 ;;		line 76 in file "mainM.c"
   692 ;; Parameters:    Size  Location     Type
   693 ;;		None
   694 ;; Auto vars:     Size  Location     Type
   695 ;;		None
   696 ;; Return value:  Size  Location     Type
   697 ;;                  1    wreg      void 
   698 ;; Registers used:
   699 ;;		wreg, status,2, status,0, pclath, cstack
   700 ;; Tracked objects:
   701 ;;		On entry : 0/0
   702 ;;		On exit  : 0/0
   703 ;;		Unchanged: 0/0
   704 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   705 ;;      Params:         0       0       0       0       0
   706 ;;      Locals:         0       0       0       0       0
   707 ;;      Temps:          0       0       0       0       0
   708 ;;      Totals:         0       0       0       0       0
   709 ;;Total ram usage:        0 bytes
   710 ;; Hardware stack levels used:    1
   711 ;; Hardware stack levels required when called:    1
   712 ;; This function calls:
   713 ;;		_spiInit
   714 ;; This function is called by:
   715 ;;		_main
   716 ;; This function uses a non-reentrant model
   717 ;;
   718                           
   719                           
   720                           ;psect for function _setup
   721  078E                     _setup:
   722  078E                     l753:	
   723                           ;incstack = 0
   724                           ; Regs used in _setup: [wreg+status,2+status,0+pclath+cstack]
   725                           
   726                           
   727                           ;mainM.c: 78:     ANSEL = 0;
   728  078E  1683               	bsf	3,5	;RP0=1, select bank3
   729  078F  1703               	bsf	3,6	;RP1=1, select bank3
   730  0790  0188               	clrf	8	;volatile
   731                           
   732                           ;mainM.c: 79:     ANSELH = 0;
   733  0791  0189               	clrf	9	;volatile
   734  0792                     l755:
   735                           
   736                           ;mainM.c: 81:     TRISC1 = 0;
   737  0792  1683               	bsf	3,5	;RP0=1, select bank1
   738  0793  1303               	bcf	3,6	;RP1=0, select bank1
   739  0794  1087               	bcf	7,1	;volatile
   740  0795                     l757:
   741                           
   742                           ;mainM.c: 82:     TRISC2 = 0;
   743  0795  1107               	bcf	7,2	;volatile
   744                           
   745                           ;mainM.c: 83:     TRISB = 0;
   746  0796  0186               	clrf	6	;volatile
   747                           
   748                           ;mainM.c: 84:     TRISD = 0;
   749  0797  0188               	clrf	8	;volatile
   750  0798                     l759:
   751                           
   752                           ;mainM.c: 85:     PORTCbits.RC2 = 1;
   753  0798  1283               	bcf	3,5	;RP0=0, select bank0
   754  0799  1303               	bcf	3,6	;RP1=0, select bank0
   755  079A  1507               	bsf	7,2	;volatile
   756  079B                     l761:
   757                           
   758                           ;mainM.c: 86:     PORTCbits.RC1 = 1;
   759  079B  1487               	bsf	7,1	;volatile
   760                           
   761                           ;mainM.c: 88:     PORTA = 0;
   762  079C  0185               	clrf	5	;volatile
   763                           
   764                           ;mainM.c: 89:     PORTB = 0;
   765  079D  0186               	clrf	6	;volatile
   766                           
   767                           ;mainM.c: 90:     PORTC = 0;
   768  079E  0187               	clrf	7	;volatile
   769                           
   770                           ;mainM.c: 91:     PORTD = 0;
   771  079F  0188               	clrf	8	;volatile
   772                           
   773                           ;mainM.c: 92:     PORTE = 0;
   774  07A0  0189               	clrf	9	;volatile
   775  07A1                     l763:
   776                           
   777                           ;mainM.c: 94:     OSCCONbits.IRCF0 = 0;
   778  07A1  1683               	bsf	3,5	;RP0=1, select bank1
   779  07A2  1303               	bcf	3,6	;RP1=0, select bank1
   780  07A3  120F               	bcf	15,4	;volatile
   781  07A4                     l765:
   782                           
   783                           ;mainM.c: 95:     OSCCONbits.IRCF1 = 1;
   784  07A4  168F               	bsf	15,5	;volatile
   785  07A5                     l767:
   786                           
   787                           ;mainM.c: 96:     OSCCONbits.IRCF2 = 1;
   788  07A5  170F               	bsf	15,6	;volatile
   789  07A6                     l769:
   790                           
   791                           ;mainM.c: 97:     OSCCONbits.SCS = 1;
   792  07A6  140F               	bsf	15,0	;volatile
   793  07A7                     l771:
   794                           
   795                           ;mainM.c: 99:     spiInit(SPI_MASTER_OSC_DIV4, SPI_DATA_SAMPLE_MIDDLE, SPI_CLOCK_IDLE_LO
      +                          W, SPI_IDLE_2_ACTIVE);
   796  07A7  01F0               	clrf	spiInit@sDataSample
   797  07A8  01F1               	clrf	spiInit@sClockIdle
   798  07A9  01F2               	clrf	spiInit@sTransmitEdge
   799  07AA  3020               	movlw	32
   800  07AB  120A  118A  2778  120A  118A  	fcall	_spiInit
   801  07B0                     l53:
   802  07B0  0008               	return
   803  07B1                     __end_of_setup:
   804                           
   805                           	psect	text5
   806  0778                     __ptext5:	
   807 ;; *************** function _spiInit *****************
   808 ;; Defined at:
   809 ;;		line 11 in file "SPI.c"
   810 ;; Parameters:    Size  Location     Type
   811 ;;  sType           1    wreg     enum E1264
   812 ;;  sDataSample     1    0[COMMON] enum E1272
   813 ;;  sClockIdle      1    1[COMMON] enum E1276
   814 ;;  sTransmitEdg    1    2[COMMON] enum E1280
   815 ;; Auto vars:     Size  Location     Type
   816 ;;  sType           1    3[COMMON] enum E1264
   817 ;; Return value:  Size  Location     Type
   818 ;;                  1    wreg      void 
   819 ;; Registers used:
   820 ;;		wreg, status,2, status,0
   821 ;; Tracked objects:
   822 ;;		On entry : 0/0
   823 ;;		On exit  : 0/0
   824 ;;		Unchanged: 0/0
   825 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   826 ;;      Params:         3       0       0       0       0
   827 ;;      Locals:         1       0       0       0       0
   828 ;;      Temps:          0       0       0       0       0
   829 ;;      Totals:         4       0       0       0       0
   830 ;;Total ram usage:        4 bytes
   831 ;; Hardware stack levels used:    1
   832 ;; This function calls:
   833 ;;		Nothing
   834 ;; This function is called by:
   835 ;;		_setup
   836 ;; This function uses a non-reentrant model
   837 ;;
   838                           
   839                           
   840                           ;psect for function _spiInit
   841  0778                     _spiInit:
   842                           
   843                           ;incstack = 0
   844                           ; Regs used in _spiInit: [wreg+status,2+status,0]
   845                           ;spiInit@sType stored from wreg
   846  0778  00F3               	movwf	spiInit@sType
   847  0779                     l743:
   848                           
   849                           ;SPI.c: 11: void spiInit(Spi_Type sType, Spi_Data_Sample sDataSample, Spi_Clock_Idle sCl
      +                          ockIdle, Spi_Transmit_Edge sTransmitEdge);SPI.c: 12: {;SPI.c: 13:     TRISC5 = 0;
   850  0779  1683               	bsf	3,5	;RP0=1, select bank1
   851  077A  1303               	bcf	3,6	;RP1=0, select bank1
   852  077B  1287               	bcf	7,5	;volatile
   853                           
   854                           ;SPI.c: 14:     if(sType & 0b00000100)
   855  077C  1D73               	btfss	spiInit@sType,2
   856  077D  2F7F               	goto	u31
   857  077E  2F80               	goto	u30
   858  077F                     u31:
   859  077F  2F84               	goto	l749
   860  0780                     u30:
   861  0780                     l745:
   862                           
   863                           ;SPI.c: 15:     {;SPI.c: 16:         SSPSTAT = sTransmitEdge;
   864  0780  0872               	movf	spiInit@sTransmitEdge,w
   865  0781  0094               	movwf	20	;volatile
   866  0782                     l747:
   867                           
   868                           ;SPI.c: 17:         TRISC3 = 1;
   869  0782  1587               	bsf	7,3	;volatile
   870                           
   871                           ;SPI.c: 18:     }
   872  0783  2F88               	goto	l69
   873  0784                     l749:
   874                           
   875                           ;SPI.c: 20:     {;SPI.c: 21:         SSPSTAT = sDataSample | sTransmitEdge;
   876  0784  0870               	movf	spiInit@sDataSample,w
   877  0785  0472               	iorwf	spiInit@sTransmitEdge,w
   878  0786  0094               	movwf	20	;volatile
   879  0787                     l751:
   880                           
   881                           ;SPI.c: 22:         TRISC3 = 0;
   882  0787  1187               	bcf	7,3	;volatile
   883  0788                     l69:	
   884                           ;SPI.c: 23:     }
   885                           
   886                           
   887                           ;SPI.c: 25:     SSPCON = sType | sClockIdle;
   888  0788  0873               	movf	spiInit@sType,w
   889  0789  0471               	iorwf	spiInit@sClockIdle,w
   890  078A  1283               	bcf	3,5	;RP0=0, select bank0
   891  078B  1303               	bcf	3,6	;RP1=0, select bank0
   892  078C  0094               	movwf	20	;volatile
   893  078D                     l70:
   894  078D  0008               	return
   895  078E                     __end_of_spiInit:
   896  007E                     btemp	set	126	;btemp
   897  007E                     wtemp0	set	126
   898                           
   899                           	psect	config
   900                           
   901                           ;Config register CONFIG1 @ 0x2007
   902                           ;	Oscillator Selection bits
   903                           ;	FOSC = INTRC_NOCLKOUT, INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O f
      +                          unction on RA7/OSC1/CLKIN
   904                           ;	Watchdog Timer Enable bit
   905                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
   906                           ;	Power-up Timer Enable bit
   907                           ;	PWRTE = OFF, PWRT disabled
   908                           ;	RE3/MCLR pin function select bit
   909                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
   910                           ;	Code Protection bit
   911                           ;	CP = OFF, Program memory code protection is disabled
   912                           ;	Data Code Protection bit
   913                           ;	CPD = OFF, Data memory code protection is disabled
   914                           ;	Brown Out Reset Selection bits
   915                           ;	BOREN = OFF, BOR disabled
   916                           ;	Internal External Switchover bit
   917                           ;	IESO = OFF, Internal/External Switchover mode is disabled
   918                           ;	Fail-Safe Clock Monitor Enabled bit
   919                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
   920                           ;	Low Voltage Programming Enable bit
   921                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
   922                           ;	In-Circuit Debugger Mode bit
   923                           ;	DEBUG = 0x1, unprogrammed default
   924  2007                     	org	8199
   925  2007  20D4               	dw	8404
   926                           
   927                           ;Config register CONFIG2 @ 0x2008
   928                           ;	Brown-out Reset Selection bit
   929                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
   930                           ;	Flash Program Memory Self Write Enable bits
   931                           ;	WRT = OFF, Write protection off
   932  2008                     	org	8200
   933  2008  3FFF               	dw	16383

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         32
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5       7
    BANK0            80      0      30
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _setup->_spiInit

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0     375
                                              4 COMMON     1     1      0
                              _setup
                            _spiRead
                           _spiWrite
 ---------------------------------------------------------------------------------
 (1) _spiWrite                                             1     1      0      15
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _spiRead                                              0     0      0       0
                     _spiReceiveWait
 ---------------------------------------------------------------------------------
 (2) _spiReceiveWait                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0     360
                            _spiInit
 ---------------------------------------------------------------------------------
 (2) _spiInit                                              4     1      3     360
                                              0 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _setup
     _spiInit
   _spiRead
     _spiReceiveWait
   _spiWrite

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      5       7       1       50.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      25       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0      1E       5       37.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      25      12        0.0%


Microchip Technology PIC Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Sun Aug 01 11:39:08 2021

            _SSPSTATbits 0094                       l53 07B0                       l70 078D  
                     l73 0760                       l76 0766                       l69 0788  
                     l87 0777                       l79 075F                       _V1 0076  
                     _V2 0075                       u20 0766                       u21 0765  
                     u30 0780                       u31 077F                       u47 07BB  
                     u57 07D0                       u67 07E5                       fsr 0004  
                    l713 075B                      l715 076F                      l717 0774  
                    l751 0787                      l743 0779                      l745 0780  
                    l761 079B                      l753 078E                      l747 0782  
                    l771 07A7                      l763 07A1                      l755 0792  
                    l749 0784                      l765 07A4                      l757 0795  
                    l781 07C0                      l767 07A5                      l759 0798  
                    l783 07C6                      l775 07B1                      l769 07A6  
                    l689 0760                      l785 07CE                      l777 07B6  
                    l787 07E3                      l779 07B9                      l789 07EA  
                    indf 0000                     _main 07B1                     btemp 007E  
                   start 0000                    ?_main 0070                    _ANSEL 0188  
                  _PORTA 0005                    _PORTB 0006                    _PORTC 0007  
                  _PORTD 0008                    _PORTE 0009                    _TRISB 0086  
                  _TRISD 0088                    _setup 078E          __end_of_spiInit 078E  
        __end_of_spiRead 0778                    status 0003                    wtemp0 007E  
        __initialization 07F1             __end_of_main 07F1                   ??_main 0074  
                 ?_setup 0070                   _ANSELH 0189                   _BUFFER 0020  
                 _TRISC1 0439                   _TRISC2 043A                   _TRISC3 043B  
                 _TRISC5 043D                   _SSPCON 0014                   _SSPBUF 0013  
       __end_of_spiWrite 0760                ??_spiInit 0073                ??_spiRead 0070  
__end_of__initialization 07FC           __pcstackCOMMON 0070            __end_of_setup 07B1  
                ??_setup 0074               __pbssBANK0 0020               __pmaintext 07B1  
__size_of_spiReceiveWait 0007                  _SSPSTAT 0094                ?_spiWrite 0070  
                __ptext1 075A                  __ptext2 076F                  __ptext3 0760  
                __ptext4 078E                  __ptext5 0778                  _spiInit 0778  
                _spiRead 076F                  clrloop0 0768     end_of_initialization 07FC  
             ??_spiWrite 0070                _PORTCbits 0007              spiWrite@dat 0070  
         _spiReceiveWait 0760      start_initialization 07F1   __end_of_spiReceiveWait 0767  
            __pbssCOMMON 0075                ___latbits 0002          ?_spiReceiveWait 0070  
      __size_of_spiWrite 0006                 ?_spiInit 0070                 ?_spiRead 0070  
         __size_of_setup 0023     spiInit@sTransmitEdge 0072                clear_ram0 0767  
     spiInit@sDataSample 0070         __size_of_spiInit 0016         __size_of_spiRead 0009  
          __size_of_main 0040                 _spiWrite 075A             spiInit@sType 0073  
      spiInit@sClockIdle 0071         ??_spiReceiveWait 0070               _OSCCONbits 008F  
